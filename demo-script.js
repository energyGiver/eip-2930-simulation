import 'dotenv/config'; // dotenv import (최상단)
import fetch from 'node-fetch';
import { Network, Alchemy } from "alchemy-sdk";

// 환경 변수에서 API 키 및 RPC URL 세팅
const ALCHEMY_API_KEY = process.env.ALCHEMY_API_KEY;
if (!ALCHEMY_API_KEY) {
    throw new Error("ALCHEMY_API_KEY가 .env에 정의되어 있지 않습니다.");
}
const ALCHEMY_RPC_URL = `https://eth-sepolia.g.alchemy.com/v2/${ALCHEMY_API_KEY}`;

// Alchemy 세팅
const config = {
    apiKey: ALCHEMY_API_KEY,
    network: Network.ETH_SEPOLIA,
};
const alchemy = new Alchemy(config);

// BigNumber to hex converter
function toHex(bn) {
    if (!bn) return undefined;
    if (typeof bn === 'string') return bn;
    if (bn._isBigNumber) return bn._hex;
    return bn;
}

// 1️⃣ tx hash 기반 params 생성
async function buildParamsFromTxHash(txHash) {
    const tx = await alchemy.core.getTransaction(txHash);
    if (!tx) throw new Error(`Transaction not found: ${txHash}`);

    return [
        {
            from: tx.from,
            to: tx.to,
            value: toHex(tx.value),
            data: tx.data
        },
        "latest"
    ];
}

// 2️⃣ 직접 입력한 값으로 params 구성
function buildParamsFromInput(input) {
    return [
        {
            from: input.from,
            to: input.to,
            value: input.value,
            data: input.data
        },
        "latest"
    ];
}

// Access List 요청 실행
async function sendAccessListRequest(params) {
    const payload = {
        jsonrpc: "2.0",
        method: "eth_createAccessList",
        params: params,
        id: 1
    };

    console.log("Sending payload:");
    console.log(JSON.stringify(payload, null, 2));

    const response = await fetch(ALCHEMY_RPC_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
    });

    const result = await response.json();
    console.log("Access List response:");
    console.log(JSON.stringify(result, null, 2));
}

// 🔄 실행
async function main() {
    // txHash가 있으면 해당 트랜잭션 기반, 없으면 manual 모드
    // const txHash = "0x117861f7c6601f4f103b80ecbe490ac355ff02bbf3a19f5c0563fe56c7c6c876"; // ETH => UNI
    // const txHash = "0xf852d832bb8e4e25987834360a002ea68f9a81383c40971d184252ec337b01d0"; // ETH => USDC
    // const txHash = "0x46ac0a74e6f612cbf825aae03252594f565acb5873e90bd3dc5e2e14e77b25a0"; // UNI => USDC (Common)
    // const txHash = "0x393bb90db559f95c28ace02477a14da8cfeb00d8cf4bd0bd8ed3b1ec4cd18cb2"; // UNI => USDC (Smart Wallet)
    // const txHash = "0xdf64bdde1d11005d653553e090a6f4db263a412ca8db02724e9c25a37ea6224c"; //  USDC => UNI 
    // const txHash = "0x871f19e9db7a916ec7ab8bc0d799bf34fc3bc356716f6090ee56f653ce7dff72"; //  USDC => UNI (Smart Wallet)
    // const txHash = "0x63fb61a5f9322fbab8f47444255e9c0104388793d4b1ace316dcbbc6729cbf63"; //  UNI  => LINK
    const txHash = "0x824bb7570b5507658201a4dd6472f1a0c6a3bb16b561c61ca38d622badb0d55a"; //  LINK => UNI  

    console.log("txHash: ", txHash);

    let params;
    if (txHash && txHash !== "") {
        params = await buildParamsFromTxHash(txHash);
    } else {
        params = buildParamsFromInput({
            from: "0xD5dc5A301F05f352E5cD55612Ee3ec3a3C5F2f97",
            to: "0x3A9D48AB9751398BbFa63ad67599Bb04e4BdF98b",
            // value: "0x0", // optional
            data: "0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000683ea6330000000000000000000000000000000000000000000000000000000000000003100604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000044000000000000000000000000000000000000000000000000000000000000004c000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000003070b0e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001f9840a85d5af5bf1d1762f925bdaddc4201f98400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000600000000000000000000000001f9840a85d5af5bf1d1762f925bdaddc4201f9840000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000001f9840a85d5af5bf1d1762f925bdaddc4201f984000000000000000000000000e49acc3b16c097ec88dc9352ce4cd57ab7e35b95000000000000000000000000000000000000000000000000000000000000001900000000000000000000000000000000000000000000000000000000000000600000000000000000000000001f9840a85d5af5bf1d1762f925bdaddc4201f984000000000000000000000000d5dc5a301f05f352e5cd55612ee3ec3a3c5f2f97000000000000000000000000000000000000000000000003f731f00c57ef451f0c"
        });
    }

    await sendAccessListRequest(params);
}

main().catch(console.error);
